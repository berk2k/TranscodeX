version: '3.8'

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - --configFile=/etc/traefik/traefik.yml
    ports:
      - "80:80"       # HTTP
      - "8080:8080"   # Traefik dashboard
    volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/dynamic.yml:/etc/traefik/dynamic.yml 
      - ./start.sh:/start.sh
    entrypoint: ["/start.sh"]
    restart: unless-stopped

  upload-service:
    build: ./upload-service
    depends_on:
    #  - upload-postgres
      - rabbitmq
    #restart: on-failure  
    env_file:
    - ./.env
    environment:
      DB_NAME: ${UPLOAD_DB_NAME}
      DB_USER: ${AZURE_DB_USER}
      DB_PASS: ${AZURE_DB_PASS}
      DB_HOST: ${AZURE_DB_HOST}
      RABBITMQ_URL: ${UPLOAD_RABBITMQ_URL}
      RABBITMQ_QUEUE: ${UPLOAD_RABBITMQ_QUEUE}
      B2_KEY_ID: ${B2_KEY_ID}
      B2_APPLICATION_KEY: ${B2_APPLICATION_KEY}
      B2_BUCKET_NAME: ${B2_BUCKET_NAME}
      B2_ENDPOINT: ${B2_ENDPOINT}
      B2_REGION: ${B2_REGION}
    # ports:
    #   - "${UPLOAD_SERVICE_PORT}:${UPLOAD_SERVICE_PORT_DOCKER}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.upload.rule=PathPrefix(`/upload`)"
      - "traefik.http.routers.upload.middlewares=upload-strip,auth-middleware@file"
      - "traefik.http.middlewares.upload-strip.stripprefix.prefixes=/upload"
      - "traefik.http.services.upload.loadbalancer.server.port=${UPLOAD_SERVICE_PORT_DOCKER}"
    restart: on-failure
    #volumes:
    #  - ./upload-service:/app
  process-service:
    build: ./process-service
    depends_on:
  #    - process-postgres
      - rabbitmq
    restart: on-failure
    env_file:
    - ./.env
    environment:
      DB_NAME: ${PROCESS_DB_NAME}
      DB_USER: ${AZURE_DB_USER}
      DB_PASS: ${AZURE_DB_PASS}
      DB_HOST: ${AZURE_DB_HOST}
      RABBITMQ_URL: ${UPLOAD_RABBITMQ_URL}
      RABBITMQ_QUEUE: ${UPLOAD_RABBITMQ_QUEUE}
      B2_KEY_ID: ${B2_KEY_ID}
      B2_APPLICATION_KEY: ${B2_APPLICATION_KEY}
      B2_BUCKET_NAME: ${B2_BUCKET_NAME}
      B2_ENDPOINT: ${B2_ENDPOINT}
      B2_REGION: ${B2_REGION}
    # ports:
    #   - "${PROCESS_SERVICE_PORT}:${PROCESS_SERVICE_PORT_DOCKER}"
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.process.rule=PathPrefix(`/process`)"
    #   - "traefik.http.routers.process.middlewares=process-strip"
    #   - "traefik.http.middlewares.process-strip.stripprefix.prefixes=/process"
    #   - "traefik.http.services.process.loadbalancer.server.port=${PROCESS_SERVICE_PORT_DOCKER}"
    # restart: on-failure

  metadata-service:
    build: ./metadata-service
    depends_on:
    #  - metadata-postgres
      - rabbitmq
    #restart: on-failure
    env_file:
    - ./.env
    environment:
      DB_NAME: ${METADATA_DB_NAME}
      DB_USER: ${AZURE_DB_USER}
      DB_PASS: ${AZURE_DB_PASS}
      DB_HOST: ${AZURE_DB_HOST}
      RABBITMQ_URL: ${UPLOAD_RABBITMQ_URL}
      RABBITMQ_QUEUE: ${PROCESSED_RABBITMQ_QUEUE}
      B2_KEY_ID: ${B2_KEY_ID}
      B2_APPLICATION_KEY: ${B2_APPLICATION_KEY}
      B2_BUCKET_NAME: ${B2_BUCKET_NAME}
      B2_ENDPOINT: ${B2_ENDPOINT}
      B2_REGION: ${B2_REGION}
    # ports:
    #   - "${METADATA_SERVICE_PORT}:${METADATA_SERVICE_PORT_DOCKER}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metadata.rule=PathPrefix(`/metadata`)"
      - "traefik.http.routers.metadata.middlewares=auth-middleware@file,metadata-strip"
      - "traefik.http.middlewares.metadata-strip.stripprefix.prefixes=/metadata"
      - "traefik.http.services.metadata.loadbalancer.server.port=${METADATA_SERVICE_PORT_DOCKER}"
    restart: on-failure
  auth-service:
    build: ./auth-service
    # depends_on:
    #   - auth-postgres
    env_file:
      - ./.env
    environment:
      DB_NAME: ${AUTH_DB_NAME}
      DB_USER: ${AZURE_DB_USER}
      DB_PASS: ${AZURE_DB_PASS}
      DB_HOST: ${AZURE_DB_HOST}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth.middlewares=auth-strip"
      - "traefik.http.middlewares.auth-strip.stripprefix.prefixes=/auth"
      - "traefik.http.services.auth.loadbalancer.server.port=${AUTH_SERVICE_PORT_DOCKER}"
    restart: on-failure

  upload-postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${UPLOAD_DB_NAME}
      POSTGRES_USER: ${UPLOAD_DB_USER}
      POSTGRES_PASSWORD: ${UPLOAD_DB_PASS}
    ports:
      - "5432:5432"
    volumes:
      - upload_pg_data:/var/lib/postgresql/data
  process-postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${PROCESS_DB_NAME}
      POSTGRES_USER: ${PROCESS_DB_USER}
      POSTGRES_PASSWORD: ${PROCESS_DB_PASS}
    ports:
      - "5433:5432"  
    volumes:
      - process_pg_data:/var/lib/postgresql/data
    
  metadata-postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${METADATA_DB_NAME}
      POSTGRES_USER: ${METADATA_DB_USER}
      POSTGRES_PASSWORD: ${METADATA_DB_PASS}
    ports:
      - "5434:5432"
    volumes:
      - metadata_pg_data:/var/lib/postgresql/data
  
  auth-postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_DB: ${AUTH_DB_NAME}
      POSTGRES_USER: ${AUTH_DB_USER}
      POSTGRES_PASSWORD: ${AUTH_DB_PASS}
    ports:
      - "5435:5432" 
    volumes:
      - auth_pg_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"     # AMQP  port
      - "15672:15672"   # Web UI port
    environment:
      RABBITMQ_DEFAULT_USER: ${UPLOAD_RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${UPLOAD_RABBITMQ_DEFAULT_PASS}

volumes:
  upload_pg_data:
  process_pg_data:
  metadata_pg_data:
  auth_pg_data:
